function tone=MakeGapInNoise(varargin)



global pref

% Creates a gap stimulus consisting of a continuous  background noise with a gap.
%The background noise is generated by MakeNoise, see that function for
%params to use.
%
% given frequency, attenuation, duration, at a
% given sample rate, with an ascending/descending ramp of a given length,
% at a given SOA (stimulus onset asynchrony)
% All lengths (duration, ramp) are in ms
% frequency is in Hz, attenuation in dB
% Input:
%  frequency          -   frequency of the tone (Hz)
% % % % % % % % % % % %  attenuation        -   attenuation of the tone (dB)
% % % % % % % % % % % %                         !!!!!attenuation is relative to the max. sound pressure level
% % % % % % % % % % % %                         as specified in Prefs.m (pref.maxSPL)
%  amplitude          -   sound pressure level of the tone (dB)
%  duration           -   duration of the tone (ms)
%  samplerate         -   required sampling rate
%  ramp               -   length of an rising/falling edge (ascending/descending ramp) (ms)
%  probefreq          -   frequency of the probe tone (Hz)
%  probeamp           -   sound pressure level of the probe tone (dB)
%  SOA                -   stimulus onset asynchrony (time in ms between onset of tone and probe tone)
%
%  Output:
%  tone               -   the specified tone (empty if unsuccessful)
%

tone=[];

if nargin<2
    return;
end

params=varargin{1};
samplerate=varargin{2};
%noiseamp=params.noiseamp;
%noisefreq=params.noisefreq;
%noisebandwidth=params.noisebandwidth;
gapdur=params.gapdur;
pregap=params.pregap; %delay from the start of the noise to gap onset (ms)
ramp=params.ramp; %ramp for onset/termination of background noise
gapramp=params.gapramp; %ramp for onset/termination of gap
gapdur_samples=round(gapdur*samplerate/1000);
pregap_samples=round(pregap*samplerate/1000);

noise_params=params;
continuous_noise=MakeNoise(noise_params, samplerate);


%insert Gap
if gapdur>0 %don't bother if gapdur==0
    gapstart=pregap_samples;
    gapstop=pregap_samples+gapdur_samples;
    
    %continuous_noise(pregap_samples:pregap_samples+gapdur_samples)=zeros(size(pregap_samples:pregap_samples+gapdur_samples));
    
    %ramp
    [edge,ledge]=MakeEdge(gapramp,samplerate);     % prepare the edges
    if 2*ledge>gapdur_samples
        error('MakeGapInNoise: Gap ramp too long for Gap duration ')
    end
    continuous_noise(gapstart+1:gapstart+ledge)=continuous_noise(gapstart+1:gapstart+ledge).*edge;
    continuous_noise(gapstart+ledge:gapstop-ledge)=  0*   continuous_noise(gapstart+ledge:gapstop-ledge);
    
    continuous_noise((gapstop-ledge+1):gapstop)=continuous_noise((gapstop-ledge+1):gapstop).*fliplr(edge);
end

tone=continuous_noise;



